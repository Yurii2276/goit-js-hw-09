{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,UAAWC,SAASC,cAAc,QAClCC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAyCtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEhCH,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAEhCA,E,CA9CLM,iBAAiB,UAEjB,WACEC,MAAMC,iBAEN,IAAIC,EAAQC,OAAOnB,EAAKI,WAAWgB,OAC/BC,EAAOF,OAAOnB,EAAKK,UAAUe,OAC7BE,EAASH,OAAOnB,EAAKM,YAAYc,OACjCG,EAAW,GAEXD,GAAU,GAAKJ,EAAQ,GAAKG,EAAO,IACrCG,EAAA1B,GAAS2B,OAAOC,QAAQ,sCAG5B,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAC9BJ,EAAWI,EACXpB,EAAcgB,EAAUL,GACrBU,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBe,EAAA1B,GAAS2B,OAAOI,QACd,uBAAqBrB,QAAiBC,MAAU,IAGnDqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBe,EAAA1B,GAAS2B,OAAOC,QACd,sBAAoBlB,QAAiBC,MAAU,IAGrDS,GAASG,EAEXrB,EAAKC,UAAU8B,QAIfC,QAAQC,IAAIf,EAAOG,EAAMC,EAAQC,GACjCS,QAAQC,IAAI,oB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formField: document.querySelector(`form`),\n  delayField: document.querySelector(`input[name=\"delay\"]`),\n  stepField: document.querySelector(`input[name=\"step\"]`),\n  amountField: document.querySelector(`input[name=\"amount\"]`),\n};\n\naddEventListener(`submit`, onHandleForm);\n\nfunction onHandleForm() {\n  event.preventDefault();\n  \n  let delay = Number(refs.delayField.value);\n  let step = Number(refs.stepField.value);\n  let amount = Number(refs.amountField.value);\n  let position = 0;\n \n  if (amount <= 0 || delay < 0 || step < 0) {\n    Notiflix.Notify.failure(` Please input correct values (>=0)`);\n  }\n\nfor (let i = 1; i <= amount; i += 1) {\n    position = i;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n  refs.formField.reset();\n\n\n\n  console.log(delay, step, amount, position);\n  console.log(`функціям генерайт`);\n\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n          resolve({ position, delay });\n    } else {\n          reject({ position, delay });\n        }\n  }, delay);\n};\n  \n  \n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","formField","document","querySelector","delayField","stepField","amountField","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","addEventListener","event","preventDefault","delay1","Number","value","step","amount","position1","$parcel$interopDefault","Notify","failure","i","then","success","catch","reset","console","log"],"version":3,"file":"03-promises.b2f0c3f8.js.map"}