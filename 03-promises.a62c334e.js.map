{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAe,QACnCC,WAAYF,SAASC,cAAe,uBACpCE,UAAWH,SAASC,cAAe,sBACnCG,YAAaJ,SAASC,cAAe,yBAyCvC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEhCH,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAExBA,E,CA9CLM,iBAAkB,UAElB,WACEC,MAAMC,iBAEN,IAAIC,EAAQC,OAAOnB,EAAKI,WAAWgB,OAC/BC,EAAOF,OAAOnB,EAAKK,UAAUe,OAC7BE,EAASH,OAAOnB,EAAKM,YAAYc,OACjCG,EAAW,GAEXD,GAAU,GAAKJ,EAAQ,GAAKG,EAAO,IACrCG,EAAA1B,GAAS2B,OAAOC,QAAS,sCAG7B,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAE9BpB,EADAgB,EAAWI,EACaT,GACrBU,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBe,EAAA1B,GAAS2B,OAAOK,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBe,EAAA1B,GAAS2B,OAAOC,QACd,sBAAuCK,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGnDS,GAASG,EAEXrB,EAAKC,UAAUgC,QAIfC,QAAQC,IAAIjB,EAAOG,EAAMC,EAAQC,GACjCW,QAAQC,IAAK,oB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formField: document.querySelector(`form`),\n  delayField: document.querySelector(`input[name=\"delay\"]`),\n  stepField: document.querySelector(`input[name=\"step\"]`),\n  amountField: document.querySelector(`input[name=\"amount\"]`),\n};\n\naddEventListener(`submit`, onHandleForm);\n\nfunction onHandleForm() {\n  event.preventDefault();\n  \n  let delay = Number(refs.delayField.value);\n  let step = Number(refs.stepField.value);\n  let amount = Number(refs.amountField.value);\n  let position = 0;\n \n  if (amount <= 0 || delay < 0 || step < 0) {\n    Notiflix.Notify.failure(` Please input correct values (>=0)`);\n  }\n\nfor (let i = 1; i <= amount; i += 1) {\n    position = i;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n  refs.formField.reset();\n\n\n\n  console.log(delay, step, amount, position);\n  console.log(`функціям генерайт`);\n\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n          resolve({ position, delay });\n    } else {\n          reject({ position, delay });\n        }\n  }, delay);\n};\n  \n  \n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formField","document","querySelector","delayField","stepField","amountField","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","Math","random","addEventListener","event","preventDefault","delay1","Number","value","step","amount","position1","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch","reset","console","log"],"version":3,"file":"03-promises.a62c334e.js.map"}